# -*- coding: utf-8 -*-
"""RobotDogRotina.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PEG1wqeP6KNbJBlVdhigaq9-t_MEyzpf
"""
import socket
import time
from threading import Timer
from  Dog_Routines.Control import *
from  Dog_Routines.Ultrasonic import *
from  Dog_Routines.Buzzer import *

# Create object
control = Control()
ultra = Ultrasonic()
buzz = Buzzer()
number=-1

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.bind(('', 5000))
s.listen(5)
print('Server is now running.')

conn, addr = s.accept()
print("Connected by", addr)

flag=0

uppie=2
downie=-2
uppie2=20
downie=-20

buzz.run(0) #certificar que o buzzer está desligado
while True: 

    data = conn.recv(1024)
    number = int(data.decode("utf-8"))
    
    distance = ultra.getDistance() #a distância é em centímetros (eles fazem pingTime * 340.0 / 2.0 /10000.0)
    # pingTime = (pulseTime = (time.time() - t0)*1000000); estando em us (time é em s)
    # 340 m/s é a velocidade do som
    # 2 é a dividir a distância ida e volta
    # 10000 = (1/1000000 [us para s]) * (100 [m para cm]); convertendo para cm
        
    if distance <=20: #se estiver a menos de 20 centímetros de um obstáculo
        
        buzz.run()
        t0 = time.time()
        pode_sair = 0
        while distance <=5: #se algo estiver a menos de 5 centímetros do cão durante mais de um segundo, a flag muda
            if (time.time()-t0>=1) and pode_sair==0:
                #print ("Distance less than 5 cm for over 1 sec")
                flag = flag+1
                #time.sleep(200) #ms
                #buzz.run()
                pode_sair=1
            distance = ultra.getDistance()

        if flag%2 == 0: #se a flag for par, tem um certo conjunto de movimentos
            if number==0: #If it classifies as 0, the robot is at rest
                control.stop()

            if number==1: #If it classifies as 1, it won't walk forward; instead, it will nod in disagreement
                control.forWard() #one step forward
                print("forWard")

            if number==2: #walk backward
                control.backWard()
                print("backWard")

            if number==3: #raise height
                control.upAndDown(uppie) #este? Ou o postureBalance?
                print("upAndDown")

            if number==4: #lower height
                control.upAndDown(downie)
                print("upAndDown")

        if flag%2 != 0: #se a flag for ímpar, tem um diferente conjunto de movimentos
            if number==0: #If it classifies as 0, the robot is at rest
                control.stop()

            if number==1: 
                control.turnLeft() #one step forward
                print("turnLeft")

            if number==2: #walk backward
                control.turnRight()
                print("turnRight")

            if number==3: #raise height
                control.upAndDown(uppie2) #este? Ou o postureBalance? Ou attitude?
                print("upAndDown")

            if number==4: #lower height
                control.upAndDown(downie2)
                print("upAndDown")
        
        # Stop the robot
        control.order[0] = cmd.CMD_STOP
        control.run()
        
            
    else: #se estiver a mais de 20 centímetros de um obstáculo (código praticamente igual a <20cm, mas agora com o forWard incluído)
        buzz.run(0) #certificar que está calado
        
        if flag%2 == 0: #se a flag for par, tem um certo conjunto de movimentos
            if number==0: #If it classifies as 0, the robot is at rest
                #control.stop()
                
                #Tentar isto:
                # Stop the robot
                control.order[0] = cmd.CMD_STOP
                control.run()
                
            if number==1: #If it classifies as 1, walk forward
                #control.forWard()
                
                #Tentar isto:
                # Set the command to move forward
                control.order[0] = cmd.CMD_MOVE_FORWARD
                control.order[1] = '8'  #with a speed of 8
                # Start the robot
                control.run()
                
                time.sleep(2) #walk forward for 2 seconds
                
                print("forWard")

            if number==2: #walk backward
                control.backWard()
                print("backWard")

            if number==3: #raise height
                control.upAndDown(uppie) #este? Ou o postureBalance?
                print("upAndDown")

            if number==4: #lower height
                control.upAndDown(downie)
                print("upAndDown")
    
        if flag%2 != 0: #se a flag for ímpar, tem um diferente conjunto de movimentos
            if number==0: #If it classifies as 0, the robot is at rest
                control.stop()

            if number==1: 
                control.turnLeft()
                print("turnLeft")

            if number==2:
                control.turnRight()
                print("turnRight")

            if number==3: #raise height
                control.upAndDown(uppie2) #este? Ou o postureBalance?
                print("upAndDown")

            if number==4: #lower height
                control.upAndDown(downie2)
                print("upAndDown")
                
        # Stop the robot
        control.order[0] = cmd.CMD_STOP
        control.run()